{"name":"Adam","tagline":"Avro Datafile for Alignment and Mapping","body":"ADAM\r\n====\r\n\r\n*[Avro](http://avro.apache.org/) Datafile for Alignment/Mapping (ADAM)*\r\n\r\n# Introduction\r\n\r\nADAM is a file format as well as a light-weight framework for doing Genome Analysis.\r\n\r\n## The ADAM framework\r\n\r\nADAM is written to be modular. To create a new module, simply extend the \r\n[AdamModule](src/main/java/edu/berkeley/amplab/adam/modules/AdamModule.java) abstract\r\nclass and define your module options using [args4j](http://args4j.kohsuke.org/). The\r\n[CountReads](src/main/java/edu/berkeley/amplab/adam/modules/CountReads.java) class\r\nis a good simple example to look at. Add your module to the `AdamMain` class and it\r\nwill appear in the module list. In the future, ADAM will support dynamically loaded\r\nmodules.\r\n\r\n## ADAM File Format\r\n\r\nThe ADAM file format is an improvement on the SAM or BAM file formats in a number of ways:\r\n\r\n1. The ADAM file format is easily splittable for distributed processing with Hadoop\r\n2. The ADAM file format is completely self-contained. Each read includes the reference\r\ninformation.\r\n3. The ADAM file format is [defined in the Avro IDL](src/main/resources/avro/protocol.avdl) \r\nthat makes it easy to create implementations in many different computer languages. This schema\r\nis stored in the header of each ADAM file to ensure the data is self-descriptive.\r\n4. The ADAM file format is compact. It holds more information about each read (e.g. reference\r\nname, reference length) while still being about the same size as a BAM file. You can, of course, increase\r\nthe compression level to make an ADAM file smaller than a BAM file at the cost of encoding time.\r\n5. The ADAM file has all the information needed to encode the data later as a SAM/BAM file if needed.\r\nThe entire SAM header is stored in the Avro meta-data with key `sam.header`.\r\n6. The ADAM file format can be viewed in human-readable form as JSON using Avro tools\r\n\r\n# Getting Started\r\n\r\n## Installation\r\n\r\nYou will need to have [Maven](http://maven.apache.org/) installed in order to build this project. \r\nYou will need to have [Hadoop](http://hadoop.apache.org/) or \r\n[CDH](http://www.cloudera.com/content/cloudera/en/products/cdh.html) installed in order to run it.\r\n\r\n```\r\n$ git clone git@github.com:massie/adam.git\r\n$ cd adam\r\n$ mvn package\r\n```\r\n\r\nMaven will create a self-executing jar, e.g. adam-X.Y.jar, in the project root that is ready to be \r\nused with Hadoop.\r\n\r\n## Running ADAM\r\n\r\nTo see all the available ADAM modules, run the following command:\r\n\r\n```\r\n$ bin/hadoop jar adam-X.Y.jar\r\n```\r\n\r\nYou will receive a listing of all modules and how to launch them. The commandline syntax to\r\nrun a module is:\r\n\r\n```\r\n$ bin/hadoop jar adam-X.Y.jar [generic Hadoop options] moduleName [module options]\r\n```\r\n\r\nFor example, let's say we wanted to convert a SAM/BAM file to an ADAM file and upload it on-the-fly, you\r\nwould use a commandline similar to the following:\r\n\r\n```\r\n$ bin/hadoop jar /workspace/adam/adam-0.1-SNAPSHOT.jar \\\r\n-conf ~/.whirr/testcluster/hadoop-site.xml \\\r\nconvert -input NA12878_chr20.bam -output /user/matt/NA12878_chr20.avro\r\n```\r\n\r\nThis will convert and `NA12878_chr20.bam` file and send it to `/user/matt/NA12878_chr20.avro` directly.\r\nTo see all the options for the `convert` module, run the it without any options, e.g.\r\n\r\n```\r\n$ bin/hadoop jar adam-X.Y.jar convert\r\n```\r\n\r\n## A step-by-step example\r\n\r\nThis example will show you how to convert a BAM file to an ADAM file and then count the number of reads.\r\n\r\nFirst, we need to convert the BAM file to an ADAM file and upload it our Hadoop cluster.\r\n\r\n```\r\n$ bin/hadoop jar /workspace/adam/adam-0.1-SNAPSHOT.jar \\\r\n  -conf ~/.whirr/testcluster/hadoop-site.xml \\\r\n  convert -input NA12878_chr20.bam -output /user/matt/NA12878_chr20.avro\r\n```\r\nNote that you can also use the `HADOOP_CONF_DIR` variable if you like instead of the `-config` generic option.\r\n\r\nADAM will provide feedback about the reference being converted as well as the locus. When it finishes,\r\nyou should see a message similar to `X secs to convert Y reads`.\r\n\r\nNow that your ADAM file stored in Hadoop, you can run analysis on it. Let's count the number\r\nof reads per reference in the ADAM file using the `count_reads` module.\r\n\r\n```\r\n$ bin/hadoop jar /workspace/adam/adam-0.1-SNAPSHOT.jar  \\\r\n-conf ~/.whirr/testcluster/hadoop-site.xml \\\r\ncount_reads -input /user/matt/NA12878_chr20.avro -output /user/matt/results\r\n```\r\n\r\nThe `results` directory will contain the output of the reducer, e.g.\r\n\r\n```\r\n$ bin/hadoop fs -ls /user/matt/results\r\n/user/matt/results/_SUCCESS\r\n/user/matt/results/part-00000.avro\r\n```\r\n\r\nLet's look at the content of the results.\r\n\r\n```\r\n$ bin/hadoop fs -get /user/matt/results/part-00000.avro .\r\n$ avrotools tojson /tmp/results/part-00000.avro \r\n{\"key\":\"chr20\",\"value\":51554029}\r\n```\r\n\r\nThis ADAM file had 51554029 reads on a single reference `chr20` (chromosome 20). Note that `avrotools` is\r\nincluded with the [Apache Avro](http://avro.apache.org/) distribution.\r\n\r\nThe results are stored as an Avro file to make it easy to use as input to another job.\r\n\r\n# License\r\n\r\nADAM is released under an [Apache 2.0 license](LICENSE.txt).\r\n\r\n# Future Work\r\n\r\nIf you're interested in helping with this project, here are things to do. Feel free to fork away and send\r\nme a pull request.\r\n\r\n* Add ability to run GATK walkers inside modules (I have a good idea how to do this. Protyping now.).\r\n* Write tests \r\n* Support dynamically loaded modules\r\n* Possibly support side-loading reference information\r\n* Processing of optional attributes\r\n\r\n# Support\r\n\r\nFeel free to contact me directly if you have any questions about ADAM. My email address is `massie@cs.berkeley.edu`.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}